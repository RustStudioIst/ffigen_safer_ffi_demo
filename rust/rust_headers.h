/*! \file */
/*******************************************
 *                                         *
 *  File auto-generated by `::safer_ffi`.  *
 *                                         *
 *  Do not manually edit this file.        *
 *                                         *
 *******************************************/

#ifndef __RUST_RUST__
#define __RUST_RUST__
#ifdef __cplusplus
extern "C" {
#endif

/** \brief
 *  A `struct` usable from both Rust and C
 */
typedef struct Point {
    /** <No documentation available> */
    double x;

    /** <No documentation available> */
    double y;
} Point_t;

/** \brief
 *  Returns the middle point of `[a, b]`.
 */
Point_t
mid_point (
    Point_t const * a,
    Point_t const * b);

/** \brief
 *  Pretty-prints a point using Rust's formatting logic.
 */
void
print_point (
    Point_t const * point);


#include <stddef.h>
#include <stdint.h>

/** \brief
 *  Same as [`Vec<T>`][`rust::Vec`], but with guaranteed `#[repr(C)]` layout
 */
typedef struct Vec_uint8 {
    /** <No documentation available> */
    uint8_t * ptr;

    /** <No documentation available> */
    size_t len;

    /** <No documentation available> */
    size_t cap;
} Vec_uint8_t;

/** \brief
 *  测试输入一个字节数组, 返回对应的字节长度
 */
size_t
test_bytes (
    Vec_uint8_t const * bytes);

/** \brief
 *
 *  @author <a href="mailto:angcyo@126.com">angcyo</a>
 *  @date 2024/04/30
 *
 *  测试输入一个字符串, 返回对应的字符串
 */
Vec_uint8_t
test_string (
    Vec_uint8_t const * str);


#ifdef __cplusplus
} /* extern \"C\" */
#endif

#endif /* __RUST_RUST__ */
